{"version":3,"sources":["component/Alert.js","component/Navbar.js","component/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","class","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","className","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","home","onClick","showGreen","green","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","headings","value","onChange","event","target","backgroundColor","rows","newText","showAlert","split","length","defaultProps","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","setGreen","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ac9c21e6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg} \r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.home}</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">about</Link>\r\n          </li> */}\r\n          \r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <button type=\"button\" onClick={props.showGreen} className={`btn btn-${props.green===\"light\"?\"success\":\"light\"}`}>Success</button>\r\n\r\n        <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">{`Enable ${props.mode===\"light\"?\"dark\":\"light\"} mode`}</label>\r\n</div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string,\r\n    home:PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps={\r\n    title:\"omkar\",\r\n    home:\"ghar\"\r\n}\r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n        // console.log(\"omkar\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Coverted to uppercase\",\"success\");\r\n    }\r\n\r\n    const handleLoClick=()=>{\r\n        // console.log(\"omkar\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Coverted to lowercase\",\"success\");\r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n   const handleClearText=()=>{\r\n    let newText=\"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text is cleard\",\"success\");\r\n   }\r\n\r\n    const [text,setText]=useState(\"Enter the Text Here\");\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className='container' style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>\r\n    <h1 style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>{props.headings}</h1>\r\n      <div className='mb-3'>\r\n      <textarea className='form-control' value={text}  onChange={handleOnChange} style={{backgroundColor:props.mode===\"dark\"?\"grey\":\"white\",color:props.mode===\"dark\"?\"white\":\"black\"}} id=\"myBox\" rows=\"8\"></textarea>\r\n     </div>\r\n     <button className='btn btn-primary mx-1' onClick={handleUpClick} >Convert To Uppercase</button>\r\n     <button className='btn btn-primary mx-1' onClick={handleLoClick} >Convert To Lowercase</button>\r\n     <button className='btn btn-primary mx-1' onClick={handleClearText} >Clear Text</button>\r\n    </div>\r\n    \r\n    <div className=\"container my-3\" style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>\r\n        <h1 style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>Your text Summary</h1>\r\n        <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n        \r\n        <p>{0.008 * (text.split(\" \").length)} minutes</p>\r\n        <h2>preview</h2>\r\n        <p>{text.length>0?text:\"Enter your text to preview\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","\nimport { useState } from 'react';\nimport React from 'react';\nimport './App.css';\nimport Alert from './component/Alert';\n// import About from './component/About';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\nconst [mode, setMode]=useState(\"light\");\nconst [alert, setAlert]=useState(null);\n\nconst [green, setGreen]=useState(\"light\");\nconst showGreen=()=>{\n  if(green===\"light\"){\n    setGreen(\"success\");\n    document.body.style.backgroundColor=\"#33816a\";\n  }\n  else{\n    setGreen(\"light\");\n    document.body.style.backgroundColor=\"white\";\n  }\n}\n\nconst showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n}\n\nconst toggleMode=()=>{\n  if(mode===\"light\"){\n    setMode(\"dark\")\n    document.body.style.backgroundColor=\"#27537a\";\n    showAlert(\"Dark mode is enabled\",\"success\");\n    document.title=\"TextUtils-Dark mode\";\n  }\n  else{\n    setMode(\"light\")\n    document.body.style.backgroundColor=\"white\";\n    showAlert(\"Light mode is enabled\",\"success\");\n    document.title=\"TextUtils-light mode\";\n  }\n}\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"omkar Gulambe\" home=\"Home\" mode={mode} toggleMode={toggleMode} green={green} showGreen={showGreen}/>\n      <Alert alert={alert}/>\n      {/* <div className=\"container my-3\"> */}\n      {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\"> */}\n          <TextForm showAlert={showAlert} headings=\"Enter the text to analyze below\" mode={mode} />\n          {/* </Route>\n        </Switch> */}\n      {/* </div> */}\n      {/* </Router> */}\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}